'''
Created at Feb 15th
Modified on Feb 22nd
'''
import numpy as np
import matplotlib.pyplot as plt

from sklearn.cluster import KMeans
import pytz
import csv
from pymongo.mongo_client import MongoClient
import time,datetime,pymongo


from math import radians, cos, sin, asin, sqrt, ceil

class Kmeans:
    
    def __init__(self):
        self.mongo_client = MongoClient('localhost', 27017)
        self.mongo_db = self.mongo_client['taxi']
        self.mongo_test = self.mongo_db['test']
        self.mongo_train = self.mongo_db['cthrvt_160_1min']
        
    def kmeans(self):
        number=0
        X=[]
        Y=[]
        Z=[]
        sZ=[0]
        random_state = 170
        for tup in self.mongo_train.find( {"$and" : [ 
                                            { "$or": [ 
                                                {'Time.month':9}, 
                                                {'Time.month':10} 
                                                ] } , 
                                            {'CALL_TYPE': 'C'}
                                            ]}):
            
            number=number+1
            if number%1000==0:
                print (number)
                if number == 90000:
                    print tup['Time']
                    #break
            #for count in range(0,len(tup["POLY"])-1):
            try:            
                if len(tup['POLY'])<20:
                    continue
                #for coordinates in tup["POLY"]:
                #    X.append([float(coordinates[0]),float(coordinates[1]) ])
                X.append([ tup['POLY'][0][0],tup['POLY'][0][1] ])
                Y.append([ tup['POLY'][-1][0],tup['POLY'][-1][1] ])
                for coordinates in tup['POLY'][1:-1]:
                    Z.append([ coordinates[0],coordinates[1] ])
                sZ.append(len(Z)-sum(sZ))
            except:
                print (len(tup["POLY"]))
                #time.sleep(2)

        #print X
        print (type(X))
        #X = StandardScaler().fit_transform(X)
        X=np.array(X)
        Y=np.array(Y)
        Z=np.array(Z)
        #print X
        print len(Z)
        print (len(X))
        ##############################################################################
        # Compute Kmeans
        
        #x_pred = KMeans(n_clusters=150, random_state=random_state).fit(X)
        y_pred = KMeans(n_clusters=150, random_state=random_state).fit(Y)
        plt.scatter(Y[:, 0], Y[:, 1], c=y_pred.labels_)
        plt.title("K-means clustering of end points for Sept & Oct")
        plt.savefig("Sept_oct_kmeans_end.png")
        
        #z_pred = KMeans(n_clusters=200, random_state=random_state).fit(Z)
        #print len(y_pred.cluster_centers_)
        #print len(X[:,0])
        
        '''
        f = open('start_n_transition_end_K.txt','w')
        for count in range(0,len(X)):
            f.write(str(x_pred.labels_[count])+'\t')
            sum_sZ=sum(sZ[0:count])
            for each in range(0,sZ[count+1]):
                f.write( str(z_pred.labels_[sum_sZ+each]) +'\t')
            f.write( str(y_pred.labels_[count])+'\n')
        f1 = open('K_start.txt','w')
        f2 = open('K_end.txt','w')
        f3 = open('K_n_transition.txt','w')
        print len(x_pred.cluster_centers_)
        for each in range(0,len(x_pred.cluster_centers_)):
            f1.write( str(x_pred.cluster_centers_[each]) +'\n')
            f2.write( str(y_pred.cluster_centers_[each]) +'\n')
        for each in range(0,len(z_pred.cluster_centers_)):
            f3.write( str(z_pred.cluster_centers_[each]) +'\n')
            #print x_pred.cluster_centers_[each]
        '''
        
if __name__ == '__main__':
    cot = Kmeans()
    cot.kmeans()
