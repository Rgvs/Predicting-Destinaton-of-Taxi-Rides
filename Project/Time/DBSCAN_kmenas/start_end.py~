'''
Created at Feb 15th
Modified on Feb 23rd
'''
import numpy as np
from sklearn.cluster import DBSCAN
from sklearn import metrics
from sklearn.datasets.samples_generator import make_blobs
from sklearn.preprocessing import StandardScaler
import pytz
import csv
from pymongo.mongo_client import MongoClient
import time,datetime,pymongo


from math import radians, cos, sin, asin, sqrt, ceil

class Dbscan:
    
    def __init__(self):
        self.mongo_client = MongoClient('localhost', 27017)
        self.mongo_db = self.mongo_client['taxi']
        self.mongo_test = self.mongo_db['test']
        self.mongo_train = self.mongo_db['160_daytype_A_calltype_A']
        
    def db(self):
        number=0
        X=[]
        Y=[]
        #for tup in self.mongo_train.find({"$and" : [ 
        #                                    { "$or": [ 
        #                                        {'Time.month':9}, 
        #                                        {'Time.month':10} 
        #                                        ] } , 
        #                                    {'CALL_TYPE': 'C'}
        #                                    ]}):
        for tup in self.mongo_train.find({"$and":[ {"$or":[{'TIME.month':11},{'TIME.month':12}]} , {'TIME.hour':{"$lt":12} } ] }):    
            # Generate sample data
            #print "yes"
            number=number+1
            if number%1000==0:
                print (number)
                if number == 500000:
                    break
            #for count in range(0,len(tup["POLY"])-1):
            try:            
                if len(tup['POLYLINE'])/4 < 8:
                    continue
                X.append([tup["POLYLINE"][0][0],tup["POLYLINE"][0][1]])
                Y.append([tup["POLYLINE"][-1][0],tup["POLYLINE"][-1][1]])
            except:
                print (len(tup["POLYLINE"]))
                #time.sleep(2)

        #print X
        print (type(X))
        #X = StandardScaler().fit_transform(X)
        X=np.array(X)
        Y=np.array(Y)
        #print X
        #print X[22][0]
        print (len(X))
        ##############################################################################
        # Compute DBSCAN
        db = DBSCAN(eps=0.0003, min_samples=4).fit(X)
        core_samples_mask = np.zeros_like(db.labels_, dtype=bool)
        core_samples_mask[db.core_sample_indices_] = True
        labels = db.labels_
        labelsx = labels 
        length=db.core_sample_indices_
        # Number of clusters in labels, ignoring noise if present.
        n_clusters_ = len(set(labels)) - (1 if -1 in labels else 0)
        print n_clusters_
        # Plot result
        
        
        print (len(db.core_sample_indices_))
        print (len(db.labels_))
        p=[]
        for a in range(0,n_clusters_):
            p.append(0)
        for a in range(0,n_clusters_):
            p[a]=[]
        #print p
        for i in range(0,len(labels) - 1) :
            if(labels[i] != -1) :
                p[labels[i]].append(X[i])
        meanx = []
        m1x=[]
        m2x=[]
        for i in range(0,n_clusters_):
            m=0.0
            n =0.0
            for k in p[i]:
                m = m + float(k[0])
                n = n+ float(k[1])
            m=m/len(p[i])
            n = n/len(p[i])
            meanx.append([m,n])
            m1x.append(m)
            m2x.append(n)
        f = open('db_start.txt','w')
        for a in meanx:
            a=str(a)+'\n'
            f.write(a) # python will convert \n to os.linesep
        f.close()
        
        ####################################################################
        
        db = DBSCAN(eps=0.0003, min_samples=4).fit(Y)
        core_samples_mask = np.zeros_like(db.labels_, dtype=bool)
        core_samples_mask[db.core_sample_indices_] = True
        labels = db.labels_
        
        # Number of clusters in labels, ignoring noise if present.
        n_clusters_ = len(set(labels)) - (1 if -1 in labels else 0)
        print len(db.core_sample_indices_)
        print len(db.labels_)
        
        p=[]
        for a in range(0,n_clusters_):
            p.append(0)
        for a in range(0,n_clusters_):
            p[a]=[]
        #print p
        for i in range(0,len(labels) - 1) :
            if(labels[i] != -1) :
                p[labels[i]].append(X[i])
        meany = []
        m1y=[]
        m2y=[]
        for i in range(0,n_clusters_):
            m=0.0
            n =0.0
            for k in p[i]:
                m = m + float(k[0])
                n = n+ float(k[1])
            m=m/len(p[i])
            n = n/len(p[i])
            meany.append([m,n])
            m1y.append(m)
            m2y.append(n)
        f = open('db_matching_start_end.txt','w')
        #f1 = open('matching_end.txt','w')
        print len(labels)
        print len(labelsx)
        for each in range(0,len(labels)):
            a=str(X[each])+'\t'
            a=a+str(labelsx[each])+'\t'
            #f.write(a)
            a=a+str(Y[each])+'\t'
            a=a+str(labels[each])+'\n'
            f.write(a) # python will convert \n to os.linesep
        f.close()
        #f1.close()
        f = open('db_end.txt','w')
        for a in meany:
            a=str(a)+'\n'
            f.write(a) # python will convert \n to os.linesep
        f.close()
        print('Estimated number of clusters: %d' % n_clusters_)
        ##############################################################################
        '''
        import matplotlib.pyplot as plt
        #X=StandardScaler().fit(X)
        #X= StandardScaler().inverse_transform(X)
        # Black removed and is used for noise instead.
        unique_labels = set(labels)
        colors = plt.cm.Spectral(np.linspace(0, 1, len(unique_labels)))
        for k, col in zip(unique_labels, colors):
            if k == -1:
                # Black used for noise.
                col = 'k'

            class_member_mask = (labels == k)

            xy = Y[class_member_mask & core_samples_mask]
            plt.plot(xy[:, 0], xy[:, 1], 'o', markerfacecolor=col,
                     markeredgecolor='k', markersize=8)

            xy = Y[class_member_mask & ~core_samples_mask]
            #plt.plot(xy[:, 0], xy[:, 1], 'o', markerfacecolor=col,markeredgecolor='k', markersize=6)
        #plt.plot(m1,m2,'o',markerfacecolor='k',markersize=18)
        #plt.title('DBSCAN clustering of End points for Sept & Oct')
        #plt.savefig("sept_oct_End_dbscan.png")
        #plt.show()
        '''
        

if __name__ == '__main__':
    cot = Dbscan()
    cot.db()
